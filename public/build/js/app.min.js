//= ./app.module.js

/**
 * Created by krek on 01.08.17.
 */
angular
    .module('auth', []);

var app = angular
            .module('blog', ['ui.router', 'ngMessages', 'LocalStorageModule', 'ngMaterial', 'auth'])
            .run(function () {

            });
angular
    .module('blog')
    .config(function($stateProvider, $urlRouterProvider) {
        let mainState = {
                name: 'main',
                url: '/',
                component: 'blogList',
                resolve: {
                    posts: function (blogService) {
                        return blogService.getAllPosts()
                            .then(function (resp) {
                                if (resp.status === 200) {
                                    return resp.data;
                                } else {
                                    return [];
                                }
                            });
                    }
                }
            },
            auth = {
                name: 'auth',
                url: '/auth',
                component: 'auth',
            },
            // blogState = {
            //     name: 'blog',
            //     url: '/blog/{itemId}',
            //     component: 'blogItem',
            //     resolve: {
            //         post: function(BlogService, $transition$) {
            //             console.log($transition$.params().itemId);
            //             return BlogService.getPost($transition$.params().itemId);
            //         }
            //     }
            // },
            state404 = {
                name: '404',
                url: '/404',
                templateUrl: '/404.html'
            };

        $urlRouterProvider.otherwise('/');
        $stateProvider.state(mainState);
        // $stateProvider.state(blogState);
        $stateProvider.state(state404);
        $stateProvider.state(auth);

    })
angular
    .module('auth')

    .component('auth', {
        templateUrl: './js/app/auth/auth.tmpl.html',
        controller: authController,
    });

function authController($scope, authService, $state) {
    var $ctrl = this;

    $ctrl.$onInit = onInit;
    $ctrl.login = login;
    $ctrl.logout = logout;
    $ctrl.registration = registration;
    $ctrl.authMessage = '';
    $ctrl.regMessage = '';

    console.log($ctrl);

    function onInit() {
        "use strict";
        console.log(authService.status);
    }

    function login() {
        "use strict";
        var email = $ctrl.formData.authForm.email,
            password = $ctrl.formData.authForm.password;

        authService.authUser(email, password)
            .then(function() {
                $state.go('main');
            })
            .catch(function (err) {
                $ctrl.authMessage = err.data.message;
            });
    }

    function logout() {
        "use strict";
        authService.logout();
    }

    function registration() {
        "use strict";
        var email = $ctrl.formData.registrationForm.email,
            password = $ctrl.formData.registrationForm.password;

        console.log(authService.registerUser(email, password));
    }
}

angular
    .module('blog')
    .component('blogList', {
        templateUrl: './js/app/blog-list/blog-list.tmpl.html',
        controller: blogListController,
        bindings: {
            posts: '<'
        }
    });


function blogListController($scope, blogService, $mdDialog, authService, $state) {
    var $ctrl = this;


    $ctrl.showAddDialog = showAddDialog;
    $ctrl.$onInit = $onInit;
    $ctrl.deletePost = deletePost;


    function showAddDialog(env) {
        "use strict";
        $mdDialog.show({
            controller: addDialogController,
            templateUrl: './js/app/blog-list/directives/add-dialog.tmpl.html',
            targetEvent: env,
            clickOutsideToClose: true,
            locals: {
                posts: $ctrl.posts
            }

        }).then(function (result) {
            console.log(result);
        })

        function addDialogController($scope, $mdDialog, posts) {
            var $ctrl = $scope;
            $ctrl.close = close;
            $ctrl.addPost = addPost;
            $ctrl.posts = posts;

            function close() {
                "use strict";
                $mdDialog.hide();
            }

            function addPost() {
                blogService.addPost($ctrl.title, $ctrl.text)
                    .then(function (resp) {
                        console.log(resp);
                        $ctrl.posts.push(resp.data);
                        close();
                    }).catch(function (err) {
                    console.log(err);
                });
            }
        }
    }

    function $onInit() {
        "use strict";
        $ctrl.authService = authService;
        $ctrl.status = $ctrl.authService.authData;
    }

    function deletePost(id, $index) {
        "use strict";
        var confirm = $mdDialog.confirm()
            .title('Would you like to delete this article?')
            .ok('Ok')
            .cancel('Cancel');

        $mdDialog.show(confirm).then(function() {
            blogService.removePost(id);
            $ctrl.posts.splice($index, 1);
            $mdDialog.hide();
        }, function() {
            $mdDialog.hide();
        });
    };

}

angular
    .module('blog')

    .component('blogHeader', {
        templateUrl: './js/app/header/header.tmpl.html',
        controller: headerController
    });

function headerController($scope, authService) {
    let $ctrl = this;
    $ctrl.authService = authService;
    $ctrl.authData = $ctrl.authService.authData;

    $ctrl.logout = logout;


    // $scope.$watch('$ctrl.status.authorization', checkAuth);
    //
    // function checkAuth(newValue, oldValue, scope) {
    //     "use strict";
    //     if (newValue) {
    //         $ctrl.email = authService.getProfileData().email;
    //     }
    // }

    function logout () {
        "use strict";
        authService.logout();
    }
}


angular
    .module('auth')
    .directive('checkEmail', function ($http, $q) {
        "use strict";
        return {
            require: 'ngModel',
            restrict: 'A',
            link: link
        }

        function link(scope, elem, attrs, ngModel) {
            ngModel.$asyncValidators.emailExist = emailExist;


            function emailExist(modelValue, viewValue) {
                return $http.get('//localhost:3000/api/auth/check/' + viewValue)
                    .then(function (response) {
                        if (response.data.status == 200) {
                            return true;
                        } else {
                            $q.reject(response.data.status);
                        }
                    });
            }
        }
    })
angular
    .module('auth')
    .directive('pwdCheck', function() {
        "use strict";
        return {
            require: 'ngModel',
            restrict: 'A',
            scope: {
                passwordValue: '=pwdCheck'
            },
            link: link
        }

        function link (scope, element, attrs, ngModel) {
            ngModel.$validators.pwdCheck = pwdCheck;
            scope.$watch('passwordValue', watch);

            function pwdCheck(modelValue) {
                return modelValue === scope.passwordValue;
            }


            function watch() {
                ngModel.$validate();
            }
        }

    })
angular
    .module('auth')

    .service('authService', authService);


function authService($http, $q, $rootScope, localStorageService) {
    "use strict";
    var _self = this;

    _self.authData = {
        authorization: isAuth(),
        email: getProfileData() ? getProfileData().email : '',
    };

    _self.registerUser = registerUser;
    _self.authUser = authUser;
    _self.logout = logout;

    _self.setProfileData = setProfileData;
    _self.getProfileData = getProfileData;
    _self.removeProfileData = removeProfileData;

    return _self;

    function isAuth() {
        return getProfileData() ? true : false;
    }

    function registerUser(email, password) {
        var deffered = $q.defer();
        $http
            .post("//localhost:3000/api/auth/signup", {
                email: email,
                password: password
            })
            .then(function (res) {
                deffered.resolve(authUser(email, password));

            }, function (err) {
                deffered.reject(err.status);
            });

        return deffered.promise;
    };

    function authUser(email, password) {
        "use strict";
        var deffered = $q.defer();
        $http
            .post("//localhost:3000/api/auth/signin", {
                email: email,
                password: password
            })
            .then(function (res) {
                var data = {
                    token: res.data.token,
                    email: res.config.data.email
                }
                setProfileData(data);
                _self.authData.email = data.email;
                _self.authData.authorization = true;
                deffered.resolve();
            }, function (err) {
                deffered.reject(err);
            });

        return deffered.promise;
    }

    function logout() {
        "use strict";
        $http
            .post("http://localhost:3000/api/auth/logout", {}, {
                headers: {
                    'Token': getProfileData().token
                }
            })
            .then(function (res) {
                    removeProfileData();
                    _self.authData.authorization = false;
                },
                function (err) {
                    console.log(err);
                })
    }

    function setProfileData(data) {
        return localStorageService.set('blogData', data);
    }

    function getProfileData() {
        return localStorageService.get('blogData');
    }

    function removeProfileData() {
        return localStorageService.remove('blogData');
    }

}



angular
    .module('blog')
    .service('blogService', blogService);

function blogService($http, $q, authService) {
    var _self = this;

    _self.getAllPosts = getAllPosts;
    _self.getPost = getPost;
    _self.addPost = addPost;
    _self.removePost = removePost;

    function getAllPosts() {
        "use strict";
        var deffered = $q.defer();
        $http.get('//localhost:3000/api/blog')
            .then(function(resp) {
                "use strict";
                deffered.resolve(resp);
            }, function (err) {
                deffered.reject(err);
            });
        return deffered.promise;
    }

    function getPost() {

    }

    function addPost(title, text) {
        "use strict";
        var deffered = $q.defer();
        $http.post('//localhost:3000/api/blog',{
            title: title,
            text: text,
        }, {
            headers: {
                'Token': authService.getProfileData().token
            }
        }).then(function (resp) {
            deffered.resolve(resp);
        }, function (err) {
            deffered.reject(err);
        });
        return deffered.promise;
    }

    function removePost(id) {
        "use strict";
        var deffered = $q.defer();
        $http.delete('//localhost:3000/api/blog/'+id, {
            data: {},
            headers: {
                'Token': authService.getProfileData().token,
            }
        }).then(function (resp) {
            console.log(resp);
            deffered.resolve(resp);
        }, function (err) {
            deffered.reject(err);
        });
        return deffered.promise;
    }
}
//# sourceMappingURL=data:application/json;base64,
